/*已知有两个等长的非降序序列S1, S2, 设计函数求S1与S2并集的中位数。有序序列A
​0
​​ ,A
​1
​​ ,⋯,A
​N−1
​​ 的中位数指A
​(N−1)/2
​​ 的值,即第⌊(N+1)/2⌋个数（A
​0
​​ 为第1个数）。

输入格式:
输入分三行。第一行给出序列的公共长度N（0<N≤100000），随后每行输入一个序列的信息，即N个非降序排列的整数。数字用空格间隔。

输出格式:
在一行中输出两个输入序列的并集序列的中位数。*/
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <fstream>
#include <string>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>

#define LL long long
#define debug cout<<"Error!"
#define INF 0x3f3f3f3f
#define PI atan(1.0)*4

using namespace std;
int max(int a, int b);
int main()
{
	int n, a[100005], b[100005];
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
	}
	for (int i = 0; i < n; i++)
	{
		cin >> b[i];
	}
	int i = 0, j = 0, count = 0;
	int flag = 0;
	while (i<n&&j<n)
	{
		if (a[i] == b[j]) {
			count++;
			i++;
			flag = 0;
		}
		else if(a[i]<b[j]){
			i++;
			count++;
			flag = 1;
		}
		else {
			j++;
			count++;
		}
		if (count == (2*n - 1) / 2)break;
	}
	if (n==1) {
		cout << (a[0] < b[0] ? a[0] : b[0]);
	}
	else if (flag) {
		cout << a[i];
	}
	else {
		cout << b[j];
	}


	return 0;
}
