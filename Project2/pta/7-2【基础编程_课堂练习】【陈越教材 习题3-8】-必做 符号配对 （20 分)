#include <malloc.h>
#include <iostream>
#include <stdio.h>
using namespace std;
typedef struct {
	char ch[100];
	int top = -1;
}stack;
int flag = 1;
int empty(stack *q);
int push(stack *q, char e);
int pop(stack *q, char *e);
int ck(char a);
stack *p1;

int main()
{
	int count = 0, j = 0, k = 0, a[4];
	char ch[1000], d, q[1000];
	p1 = (stack*)malloc(sizeof(stack));
	p1->top = -1;
	while (true)
	{
		k = 0;
		do {
			scanf("%c", &ch[k]);
			k++;
		} while (ch[k - 1] != '\n');
		for (int i = 0; i < k-1; i++)
		{
			if (ch[i] == '/') {
				if (ch[i + 1] == '*') {
					push(p1, '*');
					i++;
				}
			}
			else if(ch[i] == '('){
				push(p1, '(');
			}
			else if (ch[i] == '[') {
				push(p1, '[');
			}
			else if (ch[i] == '{') {
				push(p1, '{');
			}
			else if(ch[i]==']'||ch[i]==')'||ch[i]=='}'||ch[i]=='*'&&ch[i+1]=='/'){
				ck(ch[i]);
				if (ch[i] == '*'&&ch[i + 1] == '/')i++;
			}
			if (flag == 0)break;
		}
		if (flag == 0)break;
		if (ch[0] == '.')break;
	}
	if (flag && !empty(p1))ck('1');
	if (flag) {
		cout << "YES";
	}

	return 0;

}
int empty(stack *q)
{
	if (q->top == -1)return 1;
	return 0;
}
int push(stack *q, char e)
{
	if (q->top == 99)return 0;
	q->top++;
	q->ch[q->top] = e;
	return 1;
}
int pop(stack *q, char *e)
{
	if (empty(q))return 0;
	*e = q->ch[q->top];
	q->top--;
	return 1;
}
int ck(char a)
{
	char ch;
	if (pop(p1, &ch)) {
		if (ch == '('&&a == ')');
		else if (ch == '['&&a == ']');
		else if (ch == '{'&&a == '}');
		else if (ch == '*'&&a == '*');
		else {
			cout << "NO" << endl;
			if (ch == '(') {
				cout << "(-?";
			}
			else if (ch =='[') {
				cout << "[-?";
			}
			else if (ch == '{') {
				cout << "{-?";
			}
			else
			{
				cout << "/*-?";
			}
			flag = 0;
		}
	}
	else
	{
		cout << "NO" << endl;
		cout << "?-";
		if (a == ')')cout << ')';
		else if (a == ']')cout << ']';
		else if (a == '}')cout << '}';
		else {
			cout << "*/";
		}
		flag = 0;
	}
	return 1;
}
